#include <iostream>

using namespace std;

int main() {

	int n, i;
	i = 1;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = i++ : \n";
	n = i++;
	// В данном случае выполняется присвоение значению n значения i, а после значение i увеличивается на 1 
	// Если выведем значение переменной i до увеличения операнда, то у нас будет выводится 1
	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	// Вывод: n = 1, i = 2

	
	i = 2;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = ++i :\n";
	n = ++i; // В данном случае мы сначала увеличиваем нашу переменную i на 1, а уже после присваиваем увеличенной значение переменной n

	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	//Вывод: n = 3, i = 3

	i = 3;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = (--i) * (i--) :\n";
	n = (--i) * (i--);
	// 1 действие: Вычисляется префиксный декремент --i = 2
	// 2 дейтсвие: Умножаются измененные значения переменной: 2 * 2 = 4
	// 3 действие: Переменной n присваивается значение перемноженныж чисел n = 4
	// 4 дейсвтие: После выполнения всех операций вычисляется постфиксальный декремент, который находится во вторых скобках: i-- = 1
	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	// Вывод: n = 4, i = 1

	i = 5;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = (--i) * (--i) :\n";
	n = (--i) * (--i);
	// 1 действие: Т.к у нас в выражении есть 2 префиксных декремента, сначала вычисляются они, и значение i = 3
	// 2 действие: Умножаем новые данные переменных 3 * 3 = 9
	// 3 действие: Присваиваем результат выполненного умножения переменной n = 9
	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	// Вывод: n = 9, i = 3

	i = 6;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = (--i) * (i++) :\n";
	n = (--i) * (i++);
	// 1 действие: вычисляется префиксный декремент => i = 5
	// 2 действие: перемножаются между собой уже измененные хначения переменных: 5 * 5 = 25 
	// 3 действие: присвоение значения переменной n = 25;
	// 4 действие: вычисление постфиксального инкремента после всех действий: i++ = 6
	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	// Вывод: n = 25, i = 6

	i = 7;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = (i--) * (++i) :\n";
	n = (i--) * (++i);
	// 1 действие: Вычисляется префиксальный инкремент из-за большей приоритетности  ++i = 8
	// 2 действие: Вычисляется произведение между измененными значениями переменных 8 * 8 = 64
	// 3 действие: Присвоение значения переменной n = 64
	// 4 действие: После выполнения присвоения переменной n значения, из-за постфиксального декремента, значение i кменьшается на 1: i = 7
	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	// Вывод: n = 64, i = 7

	i = 8;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = i-- * ++i :\n";
	n = i-- * ++i; // Отсутсвие скобок может запутаться, но мы модем обратиться к таблице приоритета операций (дальше в реферате будет прикреплен jpg-файл)
	// В данной таблице мы видим, что в первую очередь будут выполняться постфиксальные декременты со значение приоритета 2( но это действие выполняется не в начале, а в конце, что я объясню в выводе)
	// После будут выполняться префиксные инкременты: ++i = 9 (со значением приоритета 3)
	// После будет выполняться умножение: 9 * 9 = 81 (с приоритетом 5)
	// И дальше будет идти присвоение значение переменной n = 81 ( значение приоритета 16)  

	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	// Вывод: n = 81, i = 8


	i = 9;

	cout << "At me beggining: i = " << i << '\n';
	cout << "After n = (--i) * (++i) :\n";
	n = (--i) * (++i);
	// 1 действие: выполняются префиксные инкремент и декремент, в сумме они дают 0, поэтому i остается 9
	// 2 действие: вычисления произведения значений i: 9 * 9 = 81
	// 3 действие: присвоение переменной n значение прошлого действия: n = 81

	cout << "\tn = " << n << "\n";
	cout << "\ti = " << i << "\n";
	cout << "\n";
	// Вывод: n = 81, i = 9

	return 0;
}